class Solution {
    
    public String LPS(String a, String b)
    {
        int[][] t=new int[a.length()+1][b.length()+1];
        
        for(int i=0;i<a.length()+1;i++)
            t[i][0]=0;
        
        for(int i=0;i<b.length()+1;i++)
            t[0][i]=0;
        
        int len=0;
        int row=0;
        int col=0;
        for(int i=1;i<a.length()+1;i++){
            for(int j=1;j<b.length()+1;j++){
                if(a.charAt(i-1)==b.charAt(j-1))
                {
                    t[i][j]=1+t[i-1][j-1];
                    if(len<t[i][j]){
                        len=t[i][j];
                        row=i;
                        col=j;
                    }
                }
                
                else
                    t[i][j]=0;
            }
        }
        
       
        int i=row;
        int j=col;
        String s="";
        
        while(i>0 && j>0)
        {
            if(a.charAt(i-1)==b.charAt(j-1))
            {
                s=s+Character.toString(a.charAt(i-1));
                
                i--;
                j--;
            }
            
            else
            {
                if(t[i-1][j]>=t[i][j-1])
                    i--;
                
                else
                    j--;
                
            }
        }
        
 
        return s;
        
    }
    
    public String helper(String s)
    {
        
        String rev="";
        
        for(int i=s.length()-1;i>=0;i--)
            rev=rev+Character.toString(s.charAt(i));
            
        return LPS(s,rev);
    }
    
    public String longestPalindrome(String s) {
        if(s.length()==0)
            return "";
        return helper(s);
    }
}
